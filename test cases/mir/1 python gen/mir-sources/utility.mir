;; COPYRIGHT (c) 2020 by Featuremine Corporation.
;; This software has been provided pursuant to a License Agreement
;; containing restrictions on its use.  This software contains
;; valuable trade secrets and proprietary information of
;; Featuremine Corporation and is protected by law.  It may not be
;; copied or distributed in any form or medium, disclosed to third
;; parties, reverse engineered or used in any manner not provided
;; for in said License Agreement except with the prior written
;; authorization from Featuremine Corporation.

#lang s-exp mir

(def-module utility
    [brief "Point module."]
    [doc "Contains Defenition of point 2d."]
    [namespace graph utility]
    [require "mir-sources/point.mir"])

(def-template V
    (lambda (mod ~name ~type)
        (begin
            ((def-alias ~name 
                [brief "Vector."]
                [doc   "Vector doc."]
                [type ~type])mod))))


(def-alias V2 
    [brief "Vector."]
    [doc  "Alias of Point object."]
    [type V(int32)])

(def-class Utility
    [brief "Graphic Utility"]
    [doc "Class which contains several helpers for graphic"]
    [def-constructor]
    [def-method multiply_points 
        [brief "Scalar multiplication"]
        [doc  "Make multiplication of point and salar coeficient."]
        [def-arg point
            [brief "point"]
            [type graph.Point] 
            #:ref]
        [def-arg K
            [brief "mult coefficient"]
            [type double]]
        [def-return 
            [brief "Result."]
            [type graph.Point]]]

    [def-method execute_callable
        [brief "Scalar multiplication"]
        [doc  "Make multiplication of point and salar coeficient."]
        [def-arg point
            [brief "point"]
            [type graph.Point]
             #:ref]
        [def-arg callable
            [brief "callable"]
            [type (def-callable
                [def-arg K
                    [brief "mult coefficient"]
                    [type double]]
                [def-arg point
                    [brief "point"]
                    [type graph.Point]
                    #:ref]
                [def-return 
                    [brief "Result."]
                    [type int32]])]
                    #:ref]
            
        [def-return 
            [brief "Result."]
            [type int32]]]

    [def-member calwithoutret
        [brief "asdf"]
        [type (def-callable
            [def-arg K
                [brief "mult coefficient"]
                [type double]]
            [def-arg point
                [brief "point"]
                [type graph.Point]
                #:ref]
            [def-return 
                [brief "Result."]
                [type int32]])]
                #:ref]
    
    [def-method add_callable2
        [brief "Scalar multiplication"]
        [doc  "Make multiplication of point and salar coeficient."]
        [def-arg callableWithoutRet
            [brief "callable without return"]
            [type (def-callable
                [def-arg K
                    [brief "mult coefficient"]
                    [type double]]
                [def-arg point
                    [brief "point"]
                    [type graph.Point]
                    #:ref])]
                #:ref]
        [def-return 
            [brief "Result."]
            [type int32]]]

    [def-method get_callable
        [brief "Scalar multiplication"]
        [doc  "Make multiplication of point and salar coeficient."]
        [def-arg point
            [brief "point"]
            [type graph.Point] 
            #:ref]
        [def-arg int16
            [brief "int16"]
            [type int16]]
        [def-return 
            [brief "callable"]
            [type (def-callable
                [def-arg K
                    [brief "mult coefficient"]
                    [type double]]
                [def-arg point
                    [brief "point"]
                    [type graph.Point]
                    #:ref]
                [def-return 
                    [brief "Result."]
                    [type int32]])]]]

    [def-method get_another_callable
        [brief "Scalar multiplication"]
        [doc  "Make multiplication of point and salar coeficient."]
        [def-return 
            [brief "callable"]
            [type (def-callable
                [def-arg K
                    [brief "mult coefficient"]
                    [type double]]
                [def-return 
                    [brief "Result."]
                    [type int32]])]]]

    [def-method get_callable_with_ref
        [brief "Scalar multiplication"]
        [doc  "Make multiplication of point and salar coeficient."]
        [def-return 
            [brief "callable"]
            [type (def-callable
                [def-arg K
                    [brief "mult coefficient"]
                    [type double]]
                [def-return 
                    [brief "Result."]
                    [type graph.Point] 
                    #:ref])]
            #:ref]]

    [def-method get_point_ref
        [brief "Return reference to point"]
        [doc  "Return reference to point"]
        [def-return 
            [brief "point"]
            [type graph.Point] 
            #:ref
            ]]

    [def-method divide 
        [brief "Divide numbers"]
        [doc  "Divide numbers"]
        [def-arg num1
            [brief "num1"]
            [type double]]
        [def-arg num2
            [brief "num2"]
            [type double]]
        [def-return 
            [brief "Result."]
            [type double]]]

    [def-method multiply 
        [brief "Multiply numbers"]
        [doc  "Multiply numbers"]
        [def-arg num1
            [brief "num1"]
            [type double]]
        [def-arg num2
            [brief "num2"]
            [type double]]
        [def-return 
            [brief "Result."]
            [type double]]]

    [def-method concat_strings 
        [brief "Concat two strings"]
        [doc  "Concat two strings"]
        [def-arg s1
            [brief "s1"]
            [type string]]
        [def-arg s2
            [brief "s2"]
            [type string]]
        [def-return 
            [brief "Result."]
            [type string]]] 
 
    [def-method add1 
        [brief "Add a to b and return result"]
        [doc  "Add a to b and return result"]
        [def-arg a
            [brief "a value"]
            [type int32]]
        [def-arg b
            [brief "b value"]
            [type int32]] 
        [def-return 
            [brief "sum"]
            [type int32]]]

    [def-method pointSum 
        [brief "Add a to b and return result"]
        [doc  "Add a to b and return result"]
        [def-arg a
            [brief "a value"]
            [type graph.Point]
            #:ref]
        [def-arg b
            [brief "b value"]
            [type graph.Point]
            #:ref] 
        [def-return 
            [brief "sum point"]
            [type graph.Point]]])

(def-class EmptyClass
    [brief "Empty class"]
    [doc "Empty class without members"]
    [def-constructor])

(def-struct EmptyStruct
    [brief "Empty struct"]
    [doc "Empty struct without members"])

(def-class Point
    [brief "Empty class"]
    [doc "Empty class without members"]
    [def-constructor])

(def-alias OrderId
    [brief "The OrderId"]
    [doc "The OrderId"]
    [type int64])


(def-const Pi 
    [brief "The Pi"]
    [doc "The Pi"]
    [type double] 
    [val 3.14])

(def-const HelloWorld 
    [brief "Hello World"]
    [doc "Hello World"]
    [type string] 
    [val "\"Hello World\""])


(def-class Checker
    [brief "Empty class"]
    [doc "Empty class without members"]
    [def-constructor]
    [def-method check_int8 
        [brief "check_int8"]
        [doc  "check_int8"]
        [def-arg a
            [brief "a value"]
            [type int8]]
        [def-return 
            [brief "result"]
            [type int8]]]

    [def-method check_int16 
        [brief "check_int16"]
        [doc  "check_int16"]
        [def-arg a
            [brief "a value"]
            [type int16]]
        [def-return 
            [brief "result"]
            [type int16]]]

    [def-method  check_int32 
        [brief "check_int32"]
        [doc  "check_int32"]
        [def-arg a
            [brief "a value"]
            [type int32]]
        [def-return 
            [brief "result"]
            [type int32]]]

    [def-method check_int64
        [brief "check_int64"]
        [doc  "check_int64"]
        [def-arg a
            [brief "a value"]
            [type int64]]
        [def-return 
            [brief "result"]
            [type int64]]]

    [def-method  check_uint8 
        [brief "check_uint8"]
        [doc  "check_uint8"]
        [def-arg a
            [brief "a value"]
            [type uint8]]
        [def-return 
            [brief "result"]
            [type uint8]]]

    [def-method  check_uint16 
        [brief "check_uint16"]
        [doc  "check_uint16"]
        [def-arg a
            [brief "a value"]
            [type uint16]]
        [def-return 
            [brief "result"]
            [type uint16]]]

    [def-method  check_uint32
        [brief "check_uint32"]
        [doc  "check_uint32"]
        [def-arg a
            [brief "a value"]
            [type uint32]]
        [def-return 
            [brief "result"]
            [type uint32]]]

    [def-method check_uint64 
        [brief "check_uint64"]
        [doc  "check_uint64"]
        [def-arg a
            [brief "a value"]
            [type uint64]]
        [def-return 
            [brief "result"]
            [type uint64]]]

    [def-method  check_double
        [brief "check_double"]
        [doc  "check_double"]
        [def-arg a
            [brief "a value"]
            [type double]]
        [def-return 
            [brief "result"]
            [type double]]]

    [def-method  check_bool
        [brief "check_bool"]
        [doc  "check_bool"]
        [def-arg a
            [brief "a bool"]
            [type bool]]
        [def-return 
            [brief "result"]
            [type bool]]]

    [def-method  check_char
        [brief "check_char"]
        [doc  "check_char"]
        [def-arg a
            [brief "a value"]
            [type char]]
        [def-return 
            [brief "result"]
            [type char]]]

    [def-method  check_string
        [brief "check_string"]
        [doc  "check_string"]
        [def-arg a
            [brief "a value"]
            [type string]]
        [def-return 
            [brief "result"]
            [type string]]])



(def-class pointerHolder
    [brief "pointer holder"]
    [doc "Class which contains pointer"]
    [def-constructor]

    [def-member array
        [brief "asdf"]
        [type pointer]]

    [def-method  get_int
        [brief "get_int"]
        [doc  "get_int"]
        [def-return 
            [brief "result"]
            [type int32]]])

(def-class NoneTester
    [brief "test none"]
    [doc "Class for testing nullptr return"]
    [def-constructor]

    [def-method  get_none
        [brief "get_int"]
        [doc  "get_int"]
        [def-return 
            [brief "result"]
            [type graph.Point]
            #:ref]])

(def-enum TestEnum
    [brief "Test enum"]
    [doc "Enum for testing"]
    [def-enum-value val1 [brief "Val 1"]]
    [def-enum-value val3 [brief "Val 3"] 3])


(def-struct EnumStruct
    [brief "Enum struct"]
    [doc "Struct with enum member"]
    [def-member testEnum
        [brief "testEnum"]
        [type TestEnum]])

(def-class EnumClass
    [brief "Enum class"]
    [doc "class with enum member"]
    [def-constructor]
    [def-method getHimSelf
        [brief "data"]
        [doc  "data"]
        [def-arg data
            [brief "data"]
            [type EnumClass]]
        [def-return 
            [brief "result"]
            [type EnumClass]]]

    [def-member testEnum
        [brief "testEnum"]
        [type TestEnum]]
    [def-method  set_enum
        [brief "set enum"]
        [doc  "set enum"]
        [def-arg testEnum
            [brief "testEnum"]
            [type TestEnum]]
        [def-return 
            [brief "result"]
            [type TestEnum]]])


(def-class Integer
    [brief "custon integer class"]
    [doc "custon integer class"]
    [def-constructor
        [def-arg val
            [brief "int value"]
            [type int64]]]
    [def-member value
        [brief "Integer value"]
        [type int64]]
    [def-operator <
        [brief "less"]
        [doc  "less"]
        [def-arg val
            [brief "a value"]
            [type Integer]#:ref]
        [def-return 
            [brief "result"]
            [type bool]]]
    [def-operator ==
        [brief "equal"]
        [doc  "equal"]
        [def-arg val
            [brief "a value"]
            [type Integer]#:ref]
        [def-return 
            [brief "result"]
            [type bool]]])

(def-alias PythonTestAlias
    [brief "PythonTestAlias."]
    [doc  "PythonTestAlias"]
    [type (def-python-type PythonTest [include "python_type.h"] [get-type "_get_pys_graph_aliases_AliasClass()"])])



(def-alias PythonAliasCallable
    [brief "PythonAliasCallable."]
    [doc  "PythonAliasCallable"]
    [type (def-callable
                [def-arg test
                    [brief "PythonTestAlias"]
                    [type PythonTestAlias]
                    #:ref]
                [def-return 
                    [brief "Result."]
                    [type PythonTestAlias]
                      #:ref])])

(def-class PythonTestClass
    [brief "Pytho Test Class class"]
    [doc "Pytho Test Class class"]
    [def-constructor
        [def-arg val
            [brief "python test class"]
            [type PythonTestAlias]#:ref]]
    [def-member test
        [brief "PythonTestAlias"]
        [type PythonTestAlias]#:ref]
    [def-method execute
        [brief "test_mthd"]
        [doc  "test_mthd"]
        [def-arg test
            [brief "a value"]
            [type PythonTestAlias]#:ref]
        [def-arg callable
            [brief "a value"]
            [type PythonAliasCallable]#:ref]
        [def-return 
            [brief "PythonTestAlias"]
            [type PythonAliasCallable]#:ref]]
    [def-method test_mthd
        [brief "test_mthd"]
        [doc  "test_mthd"]
        [def-arg test
            [brief "a value"]
            [type PythonTestAlias]#:ref]
        [def-return 
            [brief "PythonTestAlias"]
            [type PythonTestAlias]#:ref]])
